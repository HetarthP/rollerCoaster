



//Description: This is a program of a roller coaster ride that tells you if you
//are eligible to ride the coaster taking into account your height and other
//medical issues as well


package ovs.u1l9.rollercoaster;
import javax.swing.JOptionPane;
/**
 *
 * @author user
 */
public class RollerCoaster extends javax.swing.JFrame {

    /**
     * Creates new form RollerCoaster
     */
    public RollerCoaster() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        textBack = new javax.swing.JTextField();
        textHeart = new javax.swing.JTextField();
        textHeight = new javax.swing.JTextField();
        textResult = new javax.swing.JTextField();
        btnResult = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        textInch = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        textFeet = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("RollerCoaster Ride");

        jLabel2.setText("Height in cm (whole # only)");

        jLabel3.setText("Back Trouble (Y/N)");

        jLabel4.setText("Heart Trouble (Y/N)");

        textResult.setEditable(false);

        btnResult.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnResult.setText("Results");
        btnResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResultActionPerformed(evt);
            }
        });

        btnSave.setText("Save Ticket");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel5.setText("OR");

        jLabel6.setText("Height in feet and inches Ex. 5,11 ");

        jLabel8.setText("Feet");

        jLabel9.setText("Inches (decimal allowed here)");

        btnClear.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(jLabel2)))
                        .addGap(66, 66, 66)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnResult)
                            .addComponent(textHeight, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                            .addComponent(textBack)
                            .addComponent(textHeart))
                        .addGap(41, 41, 41)
                        .addComponent(jLabel5)
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(jLabel8))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(textFeet)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addComponent(textInch, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(213, 213, 213)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(textResult, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(83, 83, 83)
                                .addComponent(btnClear)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(9, 9, 9)
                .addComponent(btnSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(textHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(43, 43, 43)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(textBack, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(54, 54, 54)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(textHeart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addComponent(btnResult))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(textInch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(textFeet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))))
                        .addGap(31, 31, 31)
                        .addComponent(textResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(140, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClear)
                        .addGap(148, 148, 148))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResultActionPerformed
        // TODO add your handling code here:
        
        
            //These fucntions here get inputs from the text fields
    String heightInput = textHeight.getText();  //Gets height in cm 
    String feetInput = textFeet.getText();  // Gets height in feet
    String inchesInput = textInch.getText();  // Gets height in inches
    String backTroubleInput = textBack.getText().toUpperCase();  // Back trouble input
    String heartTroubleInput = textHeart.getText().toUpperCase();  // Hearttrouble input

    // This function here checks if back and heart trouble fields are empty and
    // if so, it'll tell the user to fill in all the fields
    if (backTroubleInput.isEmpty() || heartTroubleInput.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please fill in all the fields.");
        return;//This exits the method
    }

    //This function validates that back and heart trouble inputs are either "Y" or "N"
    //Also doesn't matter if its lowercase or caps, user can input both!
    if (!backTroubleInput.equals("Y") && !backTroubleInput.equals("N")) {
        JOptionPane.showMessageDialog(this, "Please enter 'Y/y' or 'N/n' for back trouble.");
        return;//This exits the method
    }
    
    if (!heartTroubleInput.equals("Y") && !heartTroubleInput.equals("N")) {
        JOptionPane.showMessageDialog(this, "Please enter 'Y/y' or 'N/n' for heart trouble.");
        return;//This exits the method
    }

    //This function checks if both the cm and feet and inches fields are empty or not
    if (!heightInput.isEmpty() && (!feetInput.isEmpty() || !inchesInput.isEmpty())) {
        JOptionPane.showMessageDialog(this, "Please input either height in cm or feet/inches, not both please.");
        return;//This exits the method
    }

    //This function makes sure the height fields are not empty for both the cm and
    //the other feet and inches boxes.
    //Also makes sure if the input boxes are not empty and displays in window
    //if theres any incorrect inputs
    if (heightInput.isEmpty() && (feetInput.isEmpty() || inchesInput.isEmpty())) {
        JOptionPane.showMessageDialog(this, "Please provide either height in cm or feet/inches.");
        return;//This exits the method
    }

    double heightInCm = 0;//This sets a new variable called heightInCm to 0

    // If height is provided in cm, then it will validate and convert it
    //also displays on window if there is any incorrect input
    if (!heightInput.isEmpty()) {//Check if the height in cm box is empty
        if (!heightInput.matches("\\d+")) {//Check if its only digits and not
                                           //anything else
            JOptionPane.showMessageDialog(this, "Please enter a valid number for height in cm.");
            return;//This exits the method
        }
        heightInCm = Double.parseDouble(heightInput);//This here converts the 
                                                     //height from a string 
                                                     //into a double value
    }

    // If height is provided in feet and inches, then it validates and converts it
    //Shows a window if numbers or inputs are not valid 
    if (!feetInput.isEmpty() || !inchesInput.isEmpty()) {//Checks if the feet box
                                                         //is empty or not
        //This makes sure only numbers for feet and inches (including decimal for inches)
        if (!feetInput.matches("\\d+") || !inchesInput.matches("\\d*\\.?\\d+")) {
            JOptionPane.showMessageDialog(this, "Please enter valid numbers for feet and inches.");
            return;//This exits the method
        }
        //This converts the feet from a string ot an integer value
        //The first line converts the feet into an integer
        int feet = Integer.parseInt(feetInput);
        //This one converts the inches to a double to allow fractional inches
        //and as well as decimals to meet the requirement of 0.36 inch for the 
        //122 cm mark
        double inches = Double.parseDouble(inchesInput);

        //This here convers the feet and inches to cm
        heightInCm = (feet * 30.48) + (inches * 2.54);

        //This makes sure height is within valid range of 188cm and 122cm or  
        //(min 4 feet 0.36 inches, max: 6 feet 2 inches)
        double minHeightInCm = (4 * 30.48) + (0.36 * 2.54); // 4 feet 0.36 inches
        double maxHeightInCm = (6 * 30.48) + (2 * 2.54);    // 6 feet 2 inches\
        
        //This is incase the height user inputs is not within valid range
        //This is specifically for the feet and inches 
        if (heightInCm < minHeightInCm || heightInCm > maxHeightInCm) {
            textResult.setText(" Sorry! Must be between 4 feet 0.36 inches and 6 feet 2 inches.");
            return;//This exits the method
        }
    }

    // Now this validate the height and health conditions
    //this is if the user inputs the height specifically for the cm box
    if (heightInCm > 188 || heightInCm < 122) {  // Max height 188 cm, min height 122 cm
        textResult.setText("Sorry, it is not safe for you to ride.");
    //This is if the user doesn't enter no and input yes (Y) instead
    //Otherwise if the user inputs yes it's all good to ride 
    } else if (backTroubleInput.equals("Y") || heartTroubleInput.equals("Y")) {
        textResult.setText("Sorry, it is not safe for you to ride.");
    } else {
        textResult.setText("It is ok for you to ride this roller coaster. Have fun!");
    }

    }//GEN-LAST:event_btnResultActionPerformed
    
    
   
    
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        // Get user inputs from text fields
    String heightInput = textHeight.getText();  // Height in cm
    String feetInput = textFeet.getText();  // Height in feet
    String inchesInput = textInch.getText();  // Height in inches
    String backTroubleInput = textBack.getText().toUpperCase();  // Back Trouble (Y/N)
    String heartTroubleInput = textHeart.getText().toUpperCase();  // Heart Trouble (Y/N)
    String resultMessage = textResult.getText();  //This here is the 
                                                  // result from the previous validation
    
                                                  
    //Checks if both the height fields are empty or not                                              
    if (!heightInput.isEmpty() && (!feetInput.isEmpty() || !inchesInput.isEmpty())) {
    JOptionPane.showMessageDialog(this, "Please input either height in cm or feet/inches, not both.");
    return; // Exit method to prevent ticket from saving
}

// Check if the result field is empty, so in case user clicks the ticket button
//before the results button

if (resultMessage.isEmpty()) {
    JOptionPane.showMessageDialog(this, "Please calculate the result before saving the ticket.");
    return; // Exit method to prevent ticket from saving
}
    //This function here checks if the back trouble and heart trouble fields are empty
    if (backTroubleInput.isEmpty() || heartTroubleInput.isEmpty()) {//Checks for empty fields
        JOptionPane.showMessageDialog(this, "Please fill in the back and heart trouble fields.");
        return;//This exits the method
    }

    // Ensure back and heart trouble are either 'Y' or 'N'
    if (!backTroubleInput.equals("Y") && !backTroubleInput.equals("N")) {
        JOptionPane.showMessageDialog(this, "Please enter 'Y/y' or 'N/n' for back trouble.");
        return;//This exits the method
    }

    if (!heartTroubleInput.equals("Y") && !heartTroubleInput.equals("N")) {
        JOptionPane.showMessageDialog(this, "Please enter 'Y/y' or 'N/n' for heart trouble.");
        return;//This exits the method
    }

    //This will basically revalidate the height before saving the ticket to ensure
    //nobody is trying to print any fake tickets
    double heightInCm = 0;
    String heightDisplay = "";  //This is just for displaying the height in the ticket

    // If height is provided in cm this function validates and converts it
    //This also shows a window if the number for height isnt valid 
    if (!heightInput.isEmpty()) {
        if (!heightInput.matches("\\d*\\.?\\d+")) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for height in cm.");
            return; // Exit method if cm is invalid
        }
        //This parses the cm input as a double
        heightInCm = Double.parseDouble(heightInput);
        heightDisplay = heightInCm + " cm";  //This here stores it in cm format for
                                             //the ticket
    }

    // If height is provided in feet and inches, validate and convert it
    //Also shows a window if the numbers arent valid 
    if (!feetInput.isEmpty() || !inchesInput.isEmpty()) {//This checks for empty fields
        if (!feetInput.matches("\\d+") || !inchesInput.matches("\\d*\\.?\\d+")) {
            JOptionPane.showMessageDialog(this, "Please enter valid numbers for feet and inches.");
            return; // Exit method if feet or inches are invalid
        }
        //This parses the feet into an integer
        int feet = Integer.parseInt(feetInput);
        //This parses the inches value as a double for fractional values (decimals)
        double inches = Double.parseDouble(inchesInput);
        
        
         // Validate inches to be in the correct range (0 <= inches < 12)
        if (inches < 0 || inches >= 12) {
            JOptionPane.showMessageDialog(this, "Inches should be between 0 and 11.99.");
            return; // Exit method if inches are out of range
        }
        
        
         double totalInches = (feet * 12) + inches;

    // Check if the total height is at least 4 feet 0.36 inches (48.36 inches)
    if (totalInches < 48.36) {
        JOptionPane.showMessageDialog(this, "Height must be at least 4 feet and 0.36 inches.");
        return; // Exit method if height is too low
    }
        //This function basically converts the feet and inches to cm
        heightInCm = (feet * 30.48) + (inches * 2.54);
        heightDisplay = feet + " feet " + inches + " inches";  //This stores 
                                                               //the feet and inches format for ticket
    }

    // Check if the height is within the valid range we specified
    if (heightInCm > 188 || heightInCm < 122) {
        resultMessage = "Sorry! it is not safe for you to ride.";  // Updates the result
        textResult.setText(resultMessage);  // Display this in the result field
    } else if (backTroubleInput.equals("Y") || heartTroubleInput.equals("Y")) {
        resultMessage = "Sorry, it is not safe for you to ride.";  //This updates the
                                                                   //result based on health conditions
        textResult.setText(resultMessage);//This will display it
    } else {
        // If everything is valid and no wrong inputs or anything that violates
        //the boundaries
        resultMessage = "It is OK for you to ride this roller coaster. Have fun!";  
        textResult.setText(resultMessage);//This will display it 
    }

    // If the result is not okay to ride, stop the ticket from showing up is 
    //what its saying basically
    if (resultMessage.contains("not safe")) {
        JOptionPane.showMessageDialog(this, "You cannot get the ticket because it is not safe for you to ride.");
        return;  //This exits the method without saving the ticket
    }

    //The ticket and the print lines with the variables embedded with the right
    //info to give to a proper customer
    String ticketContent = "----- Roller Coaster Ride Ticket -----\n" +
                           "Height: " + heightDisplay + "\n" +
                           "Back Trouble: " + backTroubleInput + "\n" +
                           "Heart Trouble: " + heartTroubleInput + "\n" +
                           "Result: " + resultMessage + "\n" +
                           "-------------------------------------";

    // Display the ticket in a window
    JOptionPane.showMessageDialog(this, ticketContent, "Your Ticket", JOptionPane.INFORMATION_MESSAGE);


        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        
        // Clear all the text fields
    textHeight.setText("");  // Clear height in cm
    textFeet.setText("");    // Clear height in feet
    textInch.setText("");    // Clear height in inches
    textBack.setText("");    // Clear back trouble field
    textHeart.setText("");   // Clear heart trouble field
    textResult.setText("");  // Clear result field
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RollerCoaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RollerCoaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RollerCoaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RollerCoaster.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RollerCoaster().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnResult;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField textBack;
    private javax.swing.JTextField textFeet;
    private javax.swing.JTextField textHeart;
    private javax.swing.JTextField textHeight;
    private javax.swing.JTextField textInch;
    private javax.swing.JTextField textResult;
    // End of variables declaration//GEN-END:variables
}
